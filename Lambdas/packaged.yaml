AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CognitoArn:
    Default: arn:aws:cognito-idp:us-east-1:406598363245:userpool/us-east-1_DvrafITiG
    Type: String
Resources:
  APIGateway:
    Properties:
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn:
              Ref: CognitoArn
        DefaultAuthorizer: CognitoAuth
      Cors: '''*'''
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://discjarswaggertemplate/swagger.yaml
      EndpointConfiguration: REGIONAL
      Name: DisciplineJar
      StageName: Prod
    Type: AWS::Serverless::Api
  Content:
    Properties:
      PrimaryKey:
        Name: Content_Id
        Type: String
      TableName: Content
    Type: AWS::Serverless::SimpleTable
  DynamoCognitoFullAccess:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Path: /
      RoleName: Dynamo_Cognito_FullAccess
    Type: AWS::IAM::Role
  DynamoDBFullControl:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /
      RoleName: DynamoDB_FullControl
    Type: AWS::IAM::Role
  User:
    Properties:
      PrimaryKey:
        Name: User_Id
        Type: String
      TableName: User
    Type: AWS::Serverless::SimpleTable
  UserReadSettings:
    Properties:
      CodeUri: s3://discjarsambuild/d0fcee2826cedfac7c6a0e9766d8844e
      Description: A function that writes User Settings to DynamoDB
      Events:
        TactAPI:
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Method: GET
            Path: /user/settings
            RestApiId:
              Ref: APIGateway
          Type: Api
      FunctionName: User_Read_Settings
      Handler: lambda_function.lambda_handler
      MemorySize: 768
      Role:
        Fn::GetAtt:
        - DynamoDBFullControl
        - Arn
      Runtime: python3.7
      Tags:
        Destination: DynamoDB
        Entity: User
        Operation: Read
        Trigger: API Gateway
      Timeout: 10
    Type: AWS::Serverless::Function
  UserWriteCognitoUserToDb:
    Properties:
      CodeUri: s3://discjarsambuild/2183202e46773b7ed1878445d3e7a501
      Description: A function that is triggered when a Cognito User confirms account
        to populate User table.
      FunctionName: User_Write_CognitoUserToDb
      Handler: lambda_function.lambda_handler
      MemorySize: 768
      Role:
        Fn::GetAtt:
        - DynamoDBFullControl
        - Arn
      Runtime: python3.7
      Tags:
        Destination: DynamoDB
        Entity: User
        Operation: Write
        Trigger: Cognito
      Timeout: 10
    Type: AWS::Serverless::Function
  UserWriteSettings:
    Properties:
      CodeUri: s3://discjarsambuild/9c4bc6771594bf9deff2f9c272b90073
      Description: A function that writes User Settings to DynamoDB
      Events:
        TactAPI:
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Method: POST
            Path: /user/settings
            RestApiId:
              Ref: APIGateway
          Type: Api
      FunctionName: User_Write_Settings
      Handler: lambda_function.lambda_handler
      MemorySize: 768
      Role:
        Fn::GetAtt:
        - DynamoDBFullControl
        - Arn
      Runtime: python3.7
      Tags:
        Destination: DynamoDB
        Entity: User
        Operation: Write
        Trigger: API Gateway
      Timeout: 10
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
