AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  #API Gateway
  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: DisciplineJar
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors: "'*'"
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: s3://discjarswaggertemplate/swagger.yaml

  #====================================================================================================================

  #Lambda Functions

  #User Entity

  UserWriteSignup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User_Write_Signup
      Description: A function that is triggered by API gateway and writes a user to the user table.
      CodeUri: User_Write_Signup/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /user/signup
            Method: POST
            Auth:
              Authorizer: None
      Tags:
        Entity: User
        Trigger: API Gateway
        Operation: Write
        Destination: DynamoDB
      
  UserWriteSettings:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User_Write_Settings
      Description: A function that writes User Settings to DynamoDB
      CodeUri: User_Write_Settings/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /user/settings
            Method: POST
            Auth:
              Authorizer: None
      Tags:
        Entity: User
        Trigger: API Gateway
        Operation: Write
        Destination: DynamoDB

  UserUpdateStatus:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User_Update_Status
      Description: A function that subscribes or unsubscribes a user.
      CodeUri: User_Update_Status/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /user/status
            Method: POST
            Auth:
              Authorizer: None
      Tags:
        Entity: User
        Trigger: API Gateway
        Operation: Write
        Destination: DynamoDB

  UserReadSettings:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User_Read_Settings
      Description: A function that writes User Settings to DynamoDB
      CodeUri: User_Read_Settings/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /user/settings
            Method: GET
            Auth:
              Authorizer: None
      Tags:
        Entity: User
        Trigger: API Gateway
        Operation: Read
        Destination: DynamoDB

  UserReadDoesUserExist:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: User_Read_DoesUserExist
      Description: A function that returns whether or not a user exists already.
      CodeUri: User_Read_DoesUserExist/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /user/exists
            Method: GET
            Auth:
              Authorizer: None
      Tags:
        Entity: User
        Trigger: API Gateway
        Operation: Read
        Destination: DynamoDB

#End of User Lambdas
#-------------------------------------------------------------------------------

#Discipline Jar Proposals
  DisciplineJarProposalWriteCookieProposal:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DisciplineJarProposal_Write_CookieProposal
      Description: A function that writes a new cookie proposal to the proposals table.
      CodeUri: DisciplineJarProposal_Write_CookieProposal/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 10
      MemorySize: 768
      Events:
        DiscJarAPI:
          Type: Api
          Properties:
            RestApiId: 
              Ref: APIGateway
            Path: /cookieproposal
            Method: POST
            Auth:
              Authorizer: None
      Tags:
        Entity: DisciplineJar Proposal
        Trigger: API Gateway
        Operation: Write
        Destination: DynamoDB

#End of Cookie Proposal Lambda
#-------------------------------------------------------------------------------

#Start of SMS Service Lambdas
  SMSServiceSendSMSToUsers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMSService_SendSMSToUsers
      Description: A function that get's a random cookie, get's all users, loops through all users and sends SMS texts to each one.
      CodeUri: SMSService_SendSMSToUsers/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 30
      MemorySize: 3008
      Events:
        Cron:
          Type: Schedule
          Properties:
            Schedule: cron(0 8 * * ? *)
            Name: DailyMorning
            Description: Every morning at 8am
            Enabled: True
      Tags:
        Entity: SMSService
        Trigger: Unknown
        Destination: nexmo

  SMSServiceTestingSendToMeOnly:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SMSService_TestingSendToMeOnly
      Description: A function that get's a random cookie, get's all users, loops through all users and sends SMS texts to each one.
      CodeUri: SMSService_TestingSendToMeOnly/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDBFullControl.Arn
      Runtime: python3.7
      Timeout: 30
      MemorySize: 3008
      Tags:
        Entity: SMSService
        Trigger: Unknown
        Destination: nexmo
#End of Lambdas
#==========================================================================================================

#Start of IAM Roles
  DynamoCognitoFullAccess:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Dynamo_Cognito_FullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - "lambda.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
      Path: "/"
  
  DynamoDBFullControl:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DynamoDB_FullControl
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - "lambda.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
      Path: "/"

#End of IAM
#==========================================================================================================

#Start of DynamoDB Tables
  User:
    Properties:
      PrimaryKey:
        Name: Phone_Num
        Type: String
      TableName: User
    Type: AWS::Serverless::SimpleTable
    
  DisciplineJar:
    Properties:
      PrimaryKey:
        Name: Cookie_Id
        Type: String
      TableName: DisciplineJar
    Type: AWS::Serverless::SimpleTable
  
  DisciplineJarProposals:
    Properties:
      PrimaryKey:
        Name: Proposal_Id
        Type: String
      TableName: DisciplineJar_Proposals
    Type: AWS::Serverless::SimpleTable

#End of DynamoDB Tables
#=================================================================================================
